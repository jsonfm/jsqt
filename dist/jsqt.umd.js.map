{"version":3,"file":"jsqt.umd.js","sources":["../../src/components/base.ts","../../src/components/button.ts","../../src/components/dial.ts","../../src/components/input.ts","../../src/components/toggle.ts"],"sourcesContent":["export class Base {\n  element: any;\n  /**\n   * A base class for objects\n   * @param {string} elementId\n   */\n  constructor(elementId: string) {\n    this.element = document.getElementById(elementId);\n    if(!this.element){\n      throw new Error(`Element with id = ${elementId} not exists! Please check it.`);\n    }\n  }\n\n  /**\n   * Checks if the dom element exists\n   */\n  exists(){\n    return !!this.element;\n  }\n\n  /**\n   * A cool API for use addEventListener\n   * @param {string} event - a name\n   * @param {function} callback - a function\n   */\n  on(event: string, callback: Function) {\n    if(this.element)\n      this.element.addEventListener(event, callback);\n  }\n\n  /**\n   * Emits an event\n   */\n  emit(event: string | Event) {\n    if(this.element)\n      this.element.dispatchEvent(event);\n  }\n\n\n  /**\n   * Updates the enabled value\n   * @param {boolean} enabled\n   */\n  setEnabled(enabled = true) {\n    if (this.element) {\n      this.element.disabled = !enabled;\n    }\n  }\n\n  /** Returns the current enabled status of the element. */\n  isEnabled(): boolean {\n    if(this.element) return !this.element.disabled;\n    return false;\n  }\n\n  /** Returns the element value property */\n  value() {\n    if (this.element) {\n      return this.element?.value;\n    }\n    return null;\n  }\n\n  /**\n   * Updates element value property.\n   * @param {string | number | boolean} value\n   */\n  setValue(value: string | number | boolean) {\n    if (this.element) this.element.value = value;\n  }\n\n  /**\n   * Updates element styles\n   * @param {string} style\n   */\n  setStyles(style: string) {\n    if (this.element) this.element.style = style;\n  }\n\n  /** Returns the element dom styles */\n  getStyles(){\n    if (this.element) return this.element.style;\n  }\n\n  /**\n   * Updates className property of the dom element\n   * @param {string} className\n   */\n  setClassName(className: string) {\n    if (this.element) this.element.className = className;\n  }\n\n  /** Returns the current className */\n  getClassName() {\n    if(this.exists()) return this.element.className;\n  }\n}\n","import { Base } from \"./base\";\n\n/** A custom buttom */\nexport class Button extends Base {\n  constructor(elementId: string) {\n    super(elementId);\n  }\n}\n","import { Base } from \"./base\";\n\n\ntype DialEvent = MouseEvent | TouchEvent;\n\n/** A custom dial */\nexport class Dial extends Base {\n  min: number;\n  max: number;\n  knob: any;\n  private _value: number;\n  private _pressed: boolean = false;\n  private _angle: number = 0;\n\n\n  constructor(elementId: string, min: number = 0, max: number = 100, value: number = 20) {\n    super(elementId);\n    this.min = min;\n    this.max = max;\n    this._value = value;\n    // this.knob = this.element.firstElementChild;\n\n    // Events\n    this.element.addEventListener(\"mousedown\", (e: DialEvent) => {this.setPressed(true); this.onRotate(e)});\n    this.element.addEventListener(\"mouseup\", (e: DialEvent) => {this.setPressed(false); this.onRotate(e)});\n    this.element.addEventListener(\"touchstart\", () => this.setPressed(true));\n    this.element.addEventListener(\"touchend\", () => this.setPressed(false));\n    this.element.addEventListener(\"mousemove\",this.onRotate);\n    this.element.addEventListener(\"touchmove\", this.onRotate);\n  }\n\n  /**\n   * Returns the current dial value.\n   */\n  value() {\n    return this._value;   \n  }\n\n  /**\n   * Returns the current angle value.\n   */\n  angle(){\n    return this._angle;\n  }\n\n  /**\n   * Updates pressed state\n   * @param pressed - new pressed value\n   */\n  setPressed(pressed: boolean){\n    this._pressed = pressed;\n  }\n\n  /**\n   * Rotates Dials and updates its angle position.\n   * @param e - a mouse or a touch event\n   */\n  onRotate = (e: DialEvent) => {\n    const angle = this.calculateAngle(e, false);\n    if(!!this._pressed){\n      this.element.style.transform = `rotate(${angle}deg)`;\n    }\n  }\n\n  /**\n   * Calculates the current dial angle\n   * @param e - a mouse or a touch events\n   * @param fixed - fix angle ?\n   */\n  calculateAngle = (e: DialEvent, fixed: boolean = true) => {\n    const dial = this.element.getBoundingClientRect();\n\n    const center = {\n      x: dial.left + dial.width / 2,\n      y: dial.top + dial.height / 2\n    }\n\n    let x = 0;\n    let y = 0;\n\n    if(e instanceof MouseEvent) {\n      x = e.clientX;\n      y = e.clientY;\n    }\n\n    if(e instanceof TouchEvent) {\n      x = e.touches[0].clientX;\n      y = e.touches[0].clientY;\n    }\n\n    const deltaX = x - center.x;\n    const deltaY = y - center.y;\n\n    const rad = Math.atan2(deltaY, deltaX);\n    let angle = rad * (180 / Math.PI);\n\n    this._angle = angle;\n    this.emit(new Event(\"change\"));\n\n    if (fixed && angle < 0 && angle >= -180){\n      angle += 180;\n    }\n    \n    return angle;\n  }\n\n}\n","import { Base } from \"./base\";\n\n/** A custom buttom */\nexport class Input extends Base {\n  constructor(elementId: string) {\n    super(elementId);\n  }\n}\n","import { Base } from \"./base\";\n\n/** A Binary (Toggle) button */\nexport class Toggle extends Base {\n  checked: boolean;\n  onStyle: string;\n  offStyle: string;\n  /**\n   *\n   * @param {string} elementId - the id of the element\n   * @param {string} onStyle - a css class name\n   * @param {string} offStyle - a css class name\n   */\n  constructor(elementId: string, onStyle: string, offStyle: string) {\n    super(elementId);\n    this.checked = false;\n    this.onStyle = onStyle;\n    this.offStyle = offStyle;\n    this.on(\"click\", this.toggle.bind(this));\n    this.updateStyle();\n  }\n\n  /**\n   * Updates checked value of the button\n   * @param {boolean} checked - checked value\n   */\n  setChecked(checked = true) {\n    this.checked = checked;\n    this.updateStyle();\n  }\n\n  /** Returns checked statuss */\n  isChecked() {\n    return this.checked;\n  }\n\n  /** Updates class styles */\n  updateStyle() {\n    if (this.element) {\n      this.element.className = this.isChecked() ? this.onStyle : this.offStyle;\n    }\n  }\n\n  /** Toggles the check status */\n  toggle() {\n    this.checked = !this.checked;\n    this.updateStyle();\n  }\n}\n"],"names":["Base","constructor","elementId","this","element","document","getElementById","Error","exists","on","event","callback","addEventListener","emit","dispatchEvent","setEnabled","enabled","disabled","isEnabled","value","_a","setValue","setStyles","style","getStyles","setClassName","className","getClassName","super","min","max","_pressed","_angle","onRotate","e","angle","calculateAngle","transform","fixed","dial","getBoundingClientRect","center","left","width","top","height","x","y","MouseEvent","clientX","clientY","TouchEvent","touches","deltaX","deltaY","Math","atan2","PI","Event","_value","setPressed","pressed","onStyle","offStyle","checked","toggle","bind","updateStyle","setChecked","isChecked"],"mappings":"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"}