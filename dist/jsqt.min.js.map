{"version":3,"file":"jsqt.min.js","sources":["../../src/components/base.ts","../../src/components/button.ts","../../src/components/toggle.ts"],"sourcesContent":["export class Base{\n    element: any;\n    /**\n     * A base clase for objects\n     * @param {string} elementId \n     */\n    constructor(elementId: string){\n        this.element = document.getElementById(elementId);\n    }\n\n    /**\n     * A cool API for use addEventListener\n     * @param {string} event - a name\n     * @param {function} callback - a function\n     */\n    on(event: string, callback: Function){\n        this.element?.addEventListener(event, callback);\n    }\n\n    /**\n     * Updates the enabled value\n     * @param {boolean} enabled\n    */\n    setEnabled(enabled: boolean = true){\n        if(this.element){\n            this.element.disabled = !enabled;\n        }\n    }\n\n    /** Returns the element value property */\n    value(){\n        if(this.element){\n            return this.element?.value;\n        }\n        return null;\n    }\n\n}\n","import { Base } from \"./base\";\n\n/** A custom buttom */\nexport class Button extends Base {\n    constructor(elementId: string){\n        super(elementId);\n    }\n}","import { Base } from \"./base\";\n\n/** A Binary (Toggle) button */\nexport class Toggle extends Base {\n    checked: boolean;\n    onStyle: string;\n    offStyle: string;\n    /**\n     * \n     * @param {string} elementId - the id of the element\n     * @param {string} onStyle - a css class name\n     * @param {string} offStyle - a css class name\n     */\n    constructor(elementId: string, onStyle: string, offStyle: string) {\n        super(elementId);\n        this.checked = false;\n        this.onStyle = onStyle;\n        this.offStyle = offStyle;\n        this.on(\"click\", this.toggle.bind(this));\n        this.updateStyle();\n    }\n\n    /**\n     * Updates checked value of the button\n     * @param {boolean} checked - checked value\n     */\n    setChecked(checked=true){\n        this.checked = checked;\n        this.updateStyle();\n    }\n\n    /** Returns checked statuss */\n    isChecked(){\n        return this.checked;\n    }\n\n    /** Updates class styles */\n    updateStyle(){\n        if(this.element){\n           if(this.isChecked()){\n               this.element.className = this.onStyle;\n           }else{\n               this.element.className = this.offStyle;\n           }\n        }\n    }\n\n    /** Toggles the check status */\n    toggle(){\n        this.checked = !this.checked;\n        this.updateStyle();\n    }\n}"],"names":["Base","constructor","elementId","this","element","document","getElementById","on","event","callback","_a","addEventListener","setEnabled","enabled","disabled","value","super","onStyle","offStyle","checked","toggle","bind","updateStyle","setChecked","isChecked","className"],"mappings":"0EAAaA,EAMTC,YAAYC,GACRC,KAAKC,QAAUC,SAASC,eAAeJ,EAC1C,CAODK,GAAGC,EAAeC,SACA,QAAdC,EAAAP,KAAKC,eAAS,IAAAM,GAAAA,EAAAC,iBAAiBH,EAAOC,EACzC,CAMDG,WAAWC,GAAmB,GACvBV,KAAKC,UACJD,KAAKC,QAAQU,UAAYD,EAEhC,CAGDE,cACI,OAAGZ,KAAKC,QACe,UAAZD,KAAKC,eAAO,IAAAM,OAAA,EAAAA,EAAEK,MAElB,IACV,gCChCC,cAAsBf,EACxBC,YAAYC,GACRc,MAAMd,EACT,kBCHC,cAAsBF,EAUxBC,YAAYC,EAAmBe,EAAiBC,GAC5CF,MAAMd,GACNC,KAAKgB,SAAU,EACfhB,KAAKc,QAAUA,EACfd,KAAKe,SAAWA,EAChBf,KAAKI,GAAG,QAASJ,KAAKiB,OAAOC,KAAKlB,OAClCA,KAAKmB,aACR,CAMDC,WAAWJ,GAAQ,GACfhB,KAAKgB,QAAUA,EACfhB,KAAKmB,aACR,CAGDE,YACI,OAAOrB,KAAKgB,OACf,CAGDG,cACOnB,KAAKC,UACFD,KAAKqB,YACJrB,KAAKC,QAAQqB,UAAYtB,KAAKc,QAE9Bd,KAAKC,QAAQqB,UAAYtB,KAAKe,SAGxC,CAGDE,SACIjB,KAAKgB,SAAWhB,KAAKgB,QACrBhB,KAAKmB,aACR"}